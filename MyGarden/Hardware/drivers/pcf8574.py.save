import smbus

device=0x20 

REL1 = 0x01
REL2 = 0x02
REL3 = 0x04
REL4 = 0x08

bus = smbus.SMBus(1)  #/dev/i2c-1


def testbit(num, k):
    if num & (1 << (k - 1)):
        return 1
    else:
        return 0

def ParseStatus(sts):
    STATUS= {
           'water_sys' : testbit(sts, 1),
           'air_sys' : testbit(sts, 2),
           'light_sys' : testbit(sts, 3),
           'fertelize_sys' : testbit(sts, 4)
    }
    return (STATUS)


def GetRealyStatus():
    byte = bus.read_byte(device)
    #print('Realy Status=',hex(255-byte))
    status = ParseStatus(255-byte)
    return status

def RealyTestOn(rel):
    #print(' in RelayTest on')
    byte = bus.read_byte(device)
    #print('byte=',byte)
    tmp=byte & (~rel)
    bus.write_byte(device,tmp)


def RealyTestOff(rel):
    #print(' in RelayTest off')
    byte = bus.read_byte(device)
    #print('byte=',byte)
    tmp=byte | rel
    bus.write_byte(device, tmp)


def activate_water():
    byte = bus.read_byte(device)
    tmp=byte & (~REL1)
    bus.write_byte(device,tmp)


def deactivate_water():
    byte = bus.read_byte(device)
    tmp=byte | REL1
    bus.write_byte(device, tmp)


def activate_fan():
    byte = bus.read_byte(device)
    tmp=byte & (~REL2)
    bus.write_byte(device,tmp)


def deactivate_fan():
    byte = bus.read_byte(device)
    tmp=byte | REL2
    bus.write_byte(device, tmp)


def activate_light():
    byte = bus.read_byte(device)
    tmp=byte & (~REL3)
    bus.write_byte(device,tmp)


def deactivate_light():
    byte = bus.read_byte(device)
    tmp=byte | REL3
    bus.write_byte(device, tmp)


def activate_fertelize():
    byte = bus.read_byte(device)
    tmp=byte & (~REL4)
    bus.write_byte(device,tmp)


def deactivate_fertelize():
    byte = bus.read_byte(device)
    tmp=byte | REL4
    bus.write_byte(device, tmp)
def main():
    #RealyTestOn(REL1)
    #RealyTestOn(REL2)
    #RealyTestOn(REL3)
    #RealyTestOn(REL4)

    #RealyTestOff(REL1)
    #RealyTestOff(REL2)
    #RealyTestOff(REL3)
    #RealyTestOff(REL4)
    print(GetRealyStatus())

if __name__=="__main__":
    main()

